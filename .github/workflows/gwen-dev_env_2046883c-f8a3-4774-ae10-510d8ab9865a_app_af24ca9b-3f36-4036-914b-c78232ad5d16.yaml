name: >-
  gwen-dev_env_2046883c-f8a3-4774-ae10-510d8ab9865a_app_af24ca9b-3f36-4036-914b-c78232ad5d16
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - main
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_6163e963-a272-4f1c-a9cb-e13eabb7b3c7
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.GWENIWIICK_ENV_2046883CF8A34774AE10510D8AB9865A_APP_AF24CA9B3F364036914BC78232AD5D16_GWENDEV_ENV_2046883CF8A34774AE10510D8AB9865A_APP_AF24CA9B3F364036914BC78232AD5D16}}
  EC2_INSTANCE_TYPE: t2.medium
  EC2_IMAGE_ID: ami-0c7217cdde317cfec
  EC2_SUBNET_ID: subnet-0511e49f8669e4d30
  EC2_SECURITY_GROUP_ID: sg-0244f2edb7af33703
  EC2_SPOT_INSTANCE_PRICE: '0.05'
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  start-runner:
    name: Start Runner
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      EC2_HOST: ${{ env.EC2_HOST }}
      EC2_INSTANCE_ID: ${{ env.EC2_INSTANCE_ID }}
    steps:
      - name: 'Run :: Decoding Secrets 4d9ef04b-9a8b-4a89-86c3-4656a80f9c1c'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials 46158b25-5768-46e4-a790-9b14286e2812'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Create AWS Spot Instance'
        run: |2-

              USER_DATA="
              #!/bin/bash
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo groupadd docker
              sudo usermod -aG docker $USER
              newgrp docker
              # docker-compose
              sudo curl -L 'https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose

              # Install GitHub Actions runner
              mkdir actions-runner && cd actions-runner
              curl -o actions-runner-linux-x64-2.312.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.312.0/actions-runner-linux-x64-2.312.0.tar.gz
              tar xzf actions-runner-linux-x64-2.312.0.tar.gz
              
              # Run GitHub Actions runner configuration
              ./config.sh --url https://github.com/iwiick-insighture/gwen-iwiick --token BAHQ7LDUHI6X6XGCA73TOVLFXHWZW
              
              # Run GitHub Actions runner
              ./run.sh
              "

              ENCODED_USER_DATA=$(echo -n "$USER_DATA" | base64 -w 0)
              echo "ENCODED_USER_DATA=$ENCODED_USER_DATA" >> $GITHUB_ENV

              REQUEST_ID=$(aws ec2 request-spot-instances     --spot-price "${{ env.EC2_SPOT_INSTANCE_PRICE }}"     --instance-count 1     --type "one-time"     --launch-specification '{"ImageId":"${{ env.EC2_IMAGE_ID }}","InstanceType":"${{ env.EC2_INSTANCE_TYPE }}","KeyName":"QWENKey","SecurityGroupIds": [ "${{ env.EC2_SECURITY_GROUP_ID }}" ], "SubnetId": "${{ env.EC2_SUBNET_ID }}", "UserData": "${{env.ENCODED_USER_DATA}}"}'     --query 'SpotInstanceRequests[0].SpotInstanceRequestId'     --output text)
              aws ec2 wait spot-instance-request-fulfilled --spot-instance-request-ids $REQUEST_ID
              INSTANCE_ID=$(aws ec2 describe-spot-instance-requests --spot-instance-request-ids $REQUEST_ID --query 'SpotInstanceRequests[*].InstanceId' --output text)
              HOSTNAME=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
              
              echo "EC2_HOST=$HOSTNAME" >> $GITHUB_ENV
              echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV 
              
  gwen-job:
    name: Gwen Job
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - start-runner
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets 6607816c-3705-4a85-84d5-a8abefff8408'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Gwen'
        run: |2-

              docker-compose -f ${{env.DOCKER_COMPOSE_FILE_PATH}} run gwen &&
              docker-compose -f ${{env.DOCKER_COMPOSE_FILE_PATH}} down -v
              
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - gwen-job
    if: ${{ always() }}
    steps:
      - name: 'Run :: Decoding Secrets 2ab1f535-f7e1-4e04-86b9-12502c0dc858'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "appType=Deployment&imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.DEPLOYMENT_ENDPOINT }}')
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
  stop-runner:
    name: Stop Runner
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - start-runner
      - gwen-job
    if: ${{ always() }}
    steps:
      - name: 'Run :: Decoding Secrets 46607c94-c32f-4c59-83df-64de385a946d'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials c0c959c1-9016-485f-9640-42e7692d6521'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Stop AWS Spot Instance'
        run: |2-

                aws ec2 terminate-instances --instance-ids ${{ needs.start-runner.outputs.EC2_INSTANCE_ID }}
              
